load("eigen");
ndim   : 3;
cutoff: 1;

load("../scripts/sph-kernel.mac");
define_kernel(ndim, cutoff, 'quintic, 'w_scalar, 'dw_scalar)$

vabs(dr):= sqrt(dr.dr);
w(dr):= block([r: vabs(dr)], ''(w_scalar(r)));
dw(dr):= block([r: vabs(dr)], dr/r * ''(dw_scalar(r)));
dws(dr):=block([r: vabs(dr)], if r>0 then dw_scalar(r)/r else 0);

x: [[5, 5, 5], [5.6, 5, 5]];
type: [1, 2];
E:  [1, 2];
cv: [3, 1];
m: [1, 2];
rho: [1, 1];
kk  : [1, 1];

with_stdout("in.atoms",
  for id thru length(x) do
  printf(true, "create_atoms ~d single ~{~g ~} units box~%", type[id], x[id]));

sph_color_loop(expr)::= buildq([expr, n: length(x)], create_list(
    block([k: type[i]],
      sum(block([l: type[j]],
          if i#j and l#k then expr else 0), j, 1, n)),
    i, 1, n));

sph_one_loop(expr)::= buildq([expr, n: length(x)],
  create_list(expr, i, 1, n));

sph_force_loop(expr)::= buildq([expr, n: length(x)], create_list(
    block([k: type[i]],
      sum(block([l: type[j]],
          if i#j then expr else 0), j, 1, n)),
    i, 1, n));

T: sph_one_loop(E[i]/cv[i]);
dE: sph_force_loop( 4*m[j]/(rho[i]*rho[j])*(kk[i]*kk[j]/(kk[i]+kk[j]))*(T[i] - T[j])*dws(x[i]-x[j]));

dE, numer;
